public class amazonMockOne {
    import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;


import java.util.*;
    class Result {

        /*
         * Complete the 'processLogs' function below.
         *
         * The function is expected to return a STRING_ARRAY.
         * The function accepts following parameters:
         *  1. STRING_ARRAY logs
         *  2. INTEGER threshold
         */

        public static List<String> processLogs(List<String> logs, int threshold) {
            // Write your code here
            List<List<String>> logLines = new ArrayList<>();

            HashMap<String, Integer> lookUpCounter = new HashMap<>();

            for(String log: logs){
                String[] l = log.split(" ");
                // logLines.add(Arrays.asList(l));
                System.out.println("l[0] = "+l[0]+ ", l[1] = "+ l[1]);
                if(!l[0].equals(l[1])){
                    if(lookUpCounter.containsKey(l[0])){
                        lookUpCounter.put(l[0], lookUpCounter.get(l[0]) + 1);
                    }
                    else if(!lookUpCounter.containsKey(l[0])){
                        lookUpCounter.put(l[0], 1);
                    }
                    if(lookUpCounter.containsKey(l[1])){
                        lookUpCounter.put(l[1], lookUpCounter.get(l[1]) + 1);
                    }
                    else if(!lookUpCounter.containsKey(l[1])){
                        lookUpCounter.put(l[1], 1);
                    }
                }
                else{
                    if(!lookUpCounter.containsKey(l[0])){
                        lookUpCounter.put(l[0], 1);
                    }
                    else if(lookUpCounter.containsKey(l[0])){
                        lookUpCounter.put(l[0], lookUpCounter.get(l[0]) + 1);
                    }
                }
            }
            List<String> sortedIds = new ArrayList<>();
            for(String id: lookUpCounter.keySet()){
                if(lookUpCounter.get(id) >= threshold){
                    sortedIds.add(id);
                }
            }

            //
            List<Integer> sortedIdsNum = new ArrayList<>();
            for(String id: sortedIds)
                sortedIdsNum.add(Integer.parseInt(id));

            Collections.sort(sortedIdsNum);

            List<String> sortedIds2 = new ArrayList<>();
            for(int id: sortedIdsNum)
                sortedIds2.add(String.valueOf(id));


            System.out.println(lookUpCounter.keySet());
            System.out.println(lookUpCounter.values());
            return sortedIds2;
            // logs.add(String.valueOf(threshold));
            // return logs;
        }

    }

    public class Solution {
        public static void main(String[] args) throws IOException {
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

            int logsCount = Integer.parseInt(bufferedReader.readLine().trim());

            List<String> logs = IntStream.range(0, logsCount).mapToObj(i -> {
                        try {
                            return bufferedReader.readLine();
                        } catch (IOException ex) {
                            throw new RuntimeException(ex);
                        }
                    })
                    .collect(toList());

            int threshold = Integer.parseInt(bufferedReader.readLine().trim());

            List<String> result = Result.processLogs(logs, threshold);

            bufferedWriter.write(
                    result.stream()
                            .collect(joining("\n"))
                            + "\n"
            );

            bufferedReader.close();
            bufferedWriter.close();
        }
    }

}
